#!/usr/bin/env node
/**
 * Module dependencies.
 */
var path = require('path-exists');
var moduleName = "app";
var port = 3000;

if(process.argv.length > 2)
  moduleName = process.argv[2];

if(process.argv.length > 3)
  port = process.argv[3];

process.on('unhandledRejection', function(reason, promise) {
  console.log('unhandledRejection promise : ' + JSON.stringify(promise));
  console.log('unhandledRejection reason : ' + reason);
});

var modulePath = '../servers/'+moduleName;
if(!path(modulePath + ".js"))
{
  console.log("schedule module is not exist");
  return;
}

var app = require(modulePath);
var debug = require('debug')('freeorder:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
